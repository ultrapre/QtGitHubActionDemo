name: daily-build-for-windows
on:
  workflow_dispatch:
  
jobs:
  build-test:
    name: Build the project on windows platform with Qt5
    runs-on: windows-2019
    strategy:
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        # qt_arch: [win32_msvc2019, win64_msvc2019_64]
        qt_arch: [win64_msvc2019_64]
        include:
          #- qt_arch: win32_msvc2019
          #  msvc_arch: x86
          #  qt_arch_install: msvc2019
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
    steps:
      # Cache Qt
      - name: cacheQt
        id: WindowsCacheQt
        uses: actions/cache@v1
        with:
          path: ../Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
          key: ${{ runner.os }}-Qt/${{matrix.qt_ver}}/${{matrix.qt_arch}}
      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.10.0
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: ${{steps.WindowsCacheQt.outputs.cache-hit }}
      # Pull code and checkout.
      - name: Pull code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Build the project
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          qmake
          nmake
          dir
      # Collect output files
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: QtGitHubActionDemo-for-Windows-${{ matrix.msvc_arch }}
          path: release
      - name: To zip
        run: |
          7z.exe a release.zip release/*
          dir
      # Update release
      - name: Update release
        id: update_release
        uses: tubone24/update_release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }}
        with:
          release_name: DailyBuild
          body: Daily build.
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: release.zip
          asset_name: QtGitHubActionDemo-for-Windows-${{ matrix.msvc_arch }}.zip
          asset_content_type: application/zip
          run: echo ${{ steps.create_release.outputs.upload_url }}
