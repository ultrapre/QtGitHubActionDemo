# GUIをheadlessで起動させるための仮想環境を立ち上げる
$ Xvfb :10 -ac -screen 0 1024x768x24 &

# スクリプトとして実行した場合、環境変数が読み込めないので実行時に環境変数を設定
$ export DISPLAY=":10"

# stellarium実行
$ ./src/stellarium









##ssc
StelMovementMgr.zoomTo(180) ;
// 緯度・経度を指定
core.setObserverLocation(35.685, 139.751, 0);
StelMovementMgr.lookEast();
core.wait(0.0);
// 'hosizora.png'という名前でスクリーンショットが保存される
core.screenshot('hosizora', false, '', true);
core.quitStellarium();



















#!/bin/sh

# GUIをheadlessで起動させるための仮想環境
Xvfb :10 -ac -screen 0 1024x768x24 &

# スクリプトとして実行した場合、環境変数が読み込めないので実行時に環境変数を設定
export DISPLAY=":10"
export HOME=/home/www-data

# stellariumの--screenshot-dirや--startup-scriptオプションはフルパスじゃないと読み込めない
export EXEC_STELPATH=/var/www/html/stellarium
./stellarium/builds/unix/src/stellarium --screenshot-dir $EXEC_STELPATH/screenshots --startup-script $EXEC_STELPATH/scripts/screencapture.ssc --full-screen no

























### http://localhost:8080/index.php?longitude=139.1562&latitude=35.2676













<?php

// 緯度・経度を受け取る
$lon = $_GET['longitude'];
$lat = $_GET['latitude'];

$script_path = './stellarium/scripts/screencapture.ssc';
$screen_shot_name = md5(uniqid(rand(), true));
$screen_shot_path = "./stellarium/screenshots/{$screen_shot_name}.png";

// stellariumで使用するスクリプトを動的に作成
$script = "
StelMovementMgr.zoomTo(180) ;
core.setObserverLocation({$lon}, {$lat}, 0);
StelMovementMgr.lookEast();
core.wait(0.0);
core.screenshot('{$screen_shot_name}', false, '', true);
core.quitStellarium();
";
$fp = fopen($script_path, 'w');
fwrite($fp, $script);
fclose($fp);

// PHPでスクリプトを実行する際、stdoutとstderrを逃しておかないとプロセスがshellに取られっぱなしになり戻ってこない
exec('sh ./stellarium/exec.sh > /tmp/stellarium-stdout 2>/tmp/stellarium-stderr &');
while(!file_exists($screen_shot_path)) {
    sleep(1);
}

// ファイルが見つかった瞬間に描画すると生成途中の画像が表示され、画像が見切れてしまうため1秒待つ
sleep(1);

// stellariumは一度起動したら起動しっぱなしになるのでスクリーンショットが保存でき次第KILLする
exec("ps -ef | grep stellarium |grep -v grep | awk '{print $2}' | xargs kill");
?>

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>星</title>
</head>
<body>
    <img src="<?= $screen_shot_path ?>" alt="hosizora">
</body>
</html>
























import UIKit
import CoreLocation
import AVFoundation

class ViewController: UIViewController, CLLocationManagerDelegate, AVCapturePhotoCaptureDelegate {
    override func viewDidLoad() {
        super.viewDidLoad()
        // 撮影ボタン
        let takeBtn = UIButton()
        takeBtn.frame = CGRect(x:0, y:0, width:self.view.frame.width*0.5, height:self.view.frame.height*0.07)
        takeBtn.center = CGPoint(x:self.view.frame.width/2, y:self.view.frame.height*0.95);
        takeBtn.setTitle("shot", for: .normal)
        takeBtn.backgroundColor = .blue
        takeBtn.addTarget(self, action: #selector(takePhoto(_:)), for: UIControlEvents.touchUpInside)
        self.view.addSubview(takeBtn)
    }

    /*
     * 撮影ボタンを押したらstellariumサーバーにGET通信
     */
    @objc func takePhoto(_ sender: UIButton) {
        getStellariumCapture()
    }

    /*
     * Dockerから星空の画像を取得
     */
    func getStellariumCapture() {
        // 実機のiPhoneからローカル(Docker)のURLを叩くときはlocalhostではなくMacのIPを指定する
        let url = "http://192.168.100.165:8080/index.php?longitude=\(self.nowLon)&latitude=\(self.nowLat)"

        let request = NSMutableURLRequest(url: NSURL(string: url)! as URL)
        request.httpMethod = "GET"
        let task = URLSession.shared.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            if (error == nil) {
                let result = String(data: data!, encoding: String.Encoding(rawValue: String.Encoding.utf8.rawValue))?.trimmingCharacters(in: .whitespacesAndNewlines)
                let imgURL = URL(string:result!)
                let imgData :Data = try! Data(contentsOf: imgURL!)
                DispatchQueue.main.async {
                    // 明るさ・コンストラクタを調整した画像をセット
                    self.stellarImgView.image = self.createBrightImg(orgImg:UIImage(data: imgData)!)
                }
            } else {
                print(error)
            }
        })
        task.resume()
    }

    /*
     * 撮影した写真の明るさ等を調整する
     */
    func createBrightImg(orgImg : UIImage) -> UIImage {
        let filter = CIFilter(name: "CIColorControls")
        let ciImage = CIImage(image: orgImg)
        filter?.setValue(ciImage, forKey: kCIInputImageKey)
        // 彩度(デフォルト1)
        filter?.setValue(2, forKey: "inputSaturation")
        // 明るさ(0~1, デフォルトは0)
        filter?.setValue(0.6, forKey: "inputBrightness")
        // コントラスト(デフォルト1)
        filter?.setValue(2, forKey: "inputContrast")
        if let filteredImage = filter?.outputImage {
            return UIImage(ciImage: filteredImage)
        }
        return orgImg
    }
}



























var stellarImgView = UIImageView()
var photoImgView = UIImageView()

override func viewDidLoad() {
    super.viewDidLoad()

    // 撮影した写真を表示するView
    self.photoImgView.frame = CGRect(x:0, y:0, width:self.view.frame.width, height:self.view.frame.height*0.9)
    self.photoImgView.center.x = CGFloat(self.view.frame.width/2)
    view.addSubview(self.photoImgView)

    // 上から重ねる星空画像のView
    self.stellarImgView.frame = CGRect(x:0, y:0, width:self.view.frame.width, height:self.view.frame.height*0.9)
    self.stellarImgView.center.x = CGFloat(self.view.frame.width/2)
    self.stellarImgView.backgroundColor = .clear
    self.stellarImgView.alpha = 0.5
    self.view.addSubview(self.stellarImgView)
}
